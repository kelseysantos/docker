version: "3.8"

services:
  traefik:
    image: traefik
    networks:
      - arbotti_network
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker.exposedbydefault=false
      # Swarm
      - --providers.docker.swarmMode=true
      # Enables web UI and tells Traefik to listen to docker
      - --providers.docker
      - --api
      # Let's Encrypt
      #- --certificatesresolvers.leresolver.acme.email=myemail@server.com
      #- --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
      #- --certificatesresolvers.leresolver.acme.tlschallenge=true
      # Logging
      - --log.level=ERROR # DEBUG, ERROR, INFO???
      #- --log.filePath=/traefik.log
      #- --log.format=json
    ports:
      - 30010:80  # 30010: traefik host port
      # - "443:443"
    volumes:
      #- ./letsencrypt:/letsencrypt
      #- ./logs/traefik.log:/traefik.log
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        traefik.enable: "true"
        # Dashboard
        traefik.http.routers.traefik.rule: "Host(`traefik.alexhilman.com`) || Host(`traefik.arbotti.com`)"
        traefik.http.routers.traefik.service: api@internal
        #traefik.http.routers.traefik.tls.certresolver: leresolver
        traefik.http.routers.traefik.entrypoints: web
        traefik.http.routers.traefik.middlewares: auth-traefik
        # Swarm Mode
        traefik.http.services.traefik.loadbalancer.server.port: 80
        # Basic Auth
        traefik.http.middlewares.auth-traefik.basicauth.users: "traefikadmin:$$apr1$$Rvv7TErk$$eZzEAmMGZq7iTQ3BMD.NA0"
        
        # Global http to https redirect
        #traefik.http.routers.http-catchall.rule: "hostregexp(`{host:.+}`)"
        #traefik.http.routers.http-catchall.entrypoints: web
        #traefik.http.routers.http-catchall.middlewares: redirect-to-https
        # Middleware redirect
        #traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https

# starts 4 docker containers running minio server instances. Each
# minio server's web interface will be accessible on the host at port
# 9001 through 9004.

  minio1:
    image: minio/minio
    volumes:
      - /volumes/minio1_data:/data
    ports:
      - "9001:9000"
    networks:
      - arbotti_network
    deploy:
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
      placement:
        constraints:
          - node.labels.minio1==true
    secrets:
      - secret_key
      - access_key
    command: server http://minio{1...4}/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio2:
    image: minio/minio
    volumes:
      - /volumes/minio2_data:/data
    ports:
      - "9002:9000"
    networks:
      - arbotti_network
    deploy:
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
      placement:
        constraints:
          - node.labels.minio2==true
    secrets:
      - secret_key
      - access_key
    command: server http://minio{1...4}/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio3:
    image: minio/minio
    volumes:
      - /volumes/minio3_data:/data
    ports:
      - "9003:9000"
    networks:
      - arbotti_network
    deploy:
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
      placement:
        constraints:
          - node.labels.minio3==true
    secrets:
      - secret_key
      - access_key
    command: server http://minio{1...4}/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio4:
    image: minio/minio
    volumes:
      - /volumes/minio4_data:/data
    ports:
      - "9004:9000"
    networks:
      - arbotti_network
    deploy:
      restart_policy:
        delay: 10s
        max_attempts: 10
        window: 60s
      placement:
        constraints:
          - node.labels.minio4==true
    secrets:
      - secret_key
      - access_key
    command: server http://minio{1...4}/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

networks:
  arbotti_network:

volumes:
  minio_data1:
  minio_data2:
  minio_data3:
  minio_data4:

secrets:
  secret_key:
    external: true
  access_key:
    external: true